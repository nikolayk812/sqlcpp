// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 02_order.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const getOrder = `-- name: GetOrder :one
SELECT id, owner_id, created_at, updated_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT product_id, price_amount, price_currency, created_at
FROM order_items
WHERE order_id = $1
`

type GetOrderItemsRow struct {
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
	CreatedAt     time.Time
}

func (q *Queries) GetOrderItems(ctx context.Context, orderID uuid.UUID) ([]GetOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsRow
	for rows.Next() {
		var i GetOrderItemsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.PriceAmount,
			&i.PriceCurrency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (owner_id)
VALUES ($1)
RETURNING id
`

func (q *Queries) InsertOrder(ctx context.Context, ownerID string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertOrder, ownerID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO order_items (order_id, product_id, price_amount, price_currency)
VALUES ($1, $2, $3, $4)
`

type InsertOrderItemParams struct {
	OrderID       uuid.UUID
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.PriceAmount,
		arg.PriceCurrency,
	)
	return err
}
