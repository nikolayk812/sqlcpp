// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/shopspring/decimal"
)

const DeleteOrder = `-- name: DeleteOrder :execresult
DELETE
FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, DeleteOrder, id)
}

const DeleteOrderItems = `-- name: DeleteOrderItems :execresult
DELETE
FROM order_items
WHERE order_id = $1
`

func (q *Queries) DeleteOrderItems(ctx context.Context, orderID uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, DeleteOrderItems, orderID)
}

const GetOrder = `-- name: GetOrder :one
SELECT id,
       owner_id,
       created_at,
       updated_at,
       url,
       status,
       tags,
       payload,
       payloadb,
       deleted_at,
       price_amount,
       price_currency
FROM orders
WHERE id = $1
  AND deleted_at IS NULL
`

type GetOrderRow struct {
	ID            uuid.UUID
	OwnerID       string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Url           *string
	Status        string
	Tags          []string
	Payload       []byte
	Payloadb      []byte
	DeletedAt     *time.Time
	PriceAmount   decimal.Decimal
	PriceCurrency string
}

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (GetOrderRow, error) {
	row := q.db.QueryRow(ctx, GetOrder, id)
	var i GetOrderRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Status,
		&i.Tags,
		&i.Payload,
		&i.Payloadb,
		&i.DeletedAt,
		&i.PriceAmount,
		&i.PriceCurrency,
	)
	return i, err
}

const GetOrderItems = `-- name: GetOrderItems :many
SELECT product_id, price_amount, price_currency, created_at
FROM order_items
WHERE order_id = $1
  AND deleted_at IS NULL
`

type GetOrderItemsRow struct {
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
	CreatedAt     time.Time
}

func (q *Queries) GetOrderItems(ctx context.Context, orderID uuid.UUID) ([]GetOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, GetOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsRow
	for rows.Next() {
		var i GetOrderItemsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.PriceAmount,
			&i.PriceCurrency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetOrderJoinItems = `-- name: GetOrderJoinItems :many
SELECT o.id,
       o.owner_id,
       o.created_at,
       o.updated_at,
       o.url,
       o.status,
       o.tags,
       o.payload,
       o.payloadb,
       o.price_amount,
       o.price_currency,
       oi.product_id,
       oi.price_amount   AS item_price_amount,
       oi.price_currency AS item_price_currency
FROM orders o
         JOIN order_items oi ON o.id = oi.order_id
WHERE o.id = $1
  ANd o.deleted_at IS NULL
  AND oi.deleted_at IS NULL
`

type GetOrderJoinItemsRow struct {
	ID                uuid.UUID
	OwnerID           string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	Url               *string
	Status            string
	Tags              []string
	Payload           []byte
	Payloadb          []byte
	PriceAmount       decimal.Decimal
	PriceCurrency     string
	ProductID         uuid.UUID
	ItemPriceAmount   decimal.Decimal
	ItemPriceCurrency string
}

func (q *Queries) GetOrderJoinItems(ctx context.Context, id uuid.UUID) ([]GetOrderJoinItemsRow, error) {
	rows, err := q.db.Query(ctx, GetOrderJoinItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderJoinItemsRow
	for rows.Next() {
		var i GetOrderJoinItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Status,
			&i.Tags,
			&i.Payload,
			&i.Payloadb,
			&i.PriceAmount,
			&i.PriceCurrency,
			&i.ProductID,
			&i.ItemPriceAmount,
			&i.ItemPriceCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertOrder = `-- name: InsertOrder :one
INSERT INTO orders (owner_id, url, tags, payload, payloadb, price_amount, price_currency)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type InsertOrderParams struct {
	OwnerID       string
	Url           *string
	Tags          []string
	Payload       []byte
	Payloadb      []byte
	PriceAmount   decimal.Decimal
	PriceCurrency string
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, InsertOrder,
		arg.OwnerID,
		arg.Url,
		arg.Tags,
		arg.Payload,
		arg.Payloadb,
		arg.PriceAmount,
		arg.PriceCurrency,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const InsertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO order_items (order_id, product_id, price_amount, price_currency)
VALUES ($1, $2, $3, $4)
`

type InsertOrderItemParams struct {
	OrderID       uuid.UUID
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, InsertOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.PriceAmount,
		arg.PriceCurrency,
	)
	return err
}

const SearchOrders = `-- name: SearchOrders :many
SELECT o.id,
       o.owner_id,
       o.created_at,
       o.updated_at,
       o.url,
       o.status,
       o.tags,
       o.payload,
       o.payloadb,
       o.price_amount,
       o.price_currency,
       oi.product_id,
       oi.price_amount   AS item_price_amount,
       oi.price_currency AS item_price_currency
FROM orders o
         JOIN order_items oi ON o.id = oi.order_id
WHERE (
          ($1::UUID[] IS NULL OR o.id = ANY ($1))
              AND
          ($2::VARCHAR[] IS NULL OR o.owner_id = ANY ($2))
              AND
          ($3::TEXT[] IS NULL OR EXISTS (SELECT 1
                                                    FROM unnest($3) AS url_pattern
                                                    WHERE o.url ILIKE '%' || url_pattern || '%'))
              AND
          ($4::TEXT[] IS NULL OR o.status = ANY ($4))
              AND
          ($5::TEXT[] IS NULL OR EXISTS (SELECT 1
                                            FROM unnest($5) AS tag
                                            WHERE tag = ANY (o.tags)))
              AND
          (
              ($6::TIMESTAMP IS NULL OR o.created_at >= $6) AND
              ($7::TIMESTAMP IS NULL OR o.created_at < $7)
              )
              AND
          (
              ($8::TIMESTAMP IS NULL OR o.updated_at >= $8) AND
              ($9::TIMESTAMP IS NULL OR o.updated_at < $9)
              )
          )
`

type SearchOrdersParams struct {
	Ids           []uuid.UUID
	OwnerIds      []string
	UrlPatterns   []string
	Statuses      []string
	Tags          []string
	CreatedAfter  *time.Time
	CreatedBefore *time.Time
	UpdatedAfter  *time.Time
	UpdatedBefore *time.Time
}

type SearchOrdersRow struct {
	ID                uuid.UUID
	OwnerID           string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	Url               *string
	Status            string
	Tags              []string
	Payload           []byte
	Payloadb          []byte
	PriceAmount       decimal.Decimal
	PriceCurrency     string
	ProductID         uuid.UUID
	ItemPriceAmount   decimal.Decimal
	ItemPriceCurrency string
}

func (q *Queries) SearchOrders(ctx context.Context, arg SearchOrdersParams) ([]SearchOrdersRow, error) {
	rows, err := q.db.Query(ctx, SearchOrders,
		arg.Ids,
		arg.OwnerIds,
		arg.UrlPatterns,
		arg.Statuses,
		arg.Tags,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchOrdersRow
	for rows.Next() {
		var i SearchOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Status,
			&i.Tags,
			&i.Payload,
			&i.Payloadb,
			&i.PriceAmount,
			&i.PriceCurrency,
			&i.ProductID,
			&i.ItemPriceAmount,
			&i.ItemPriceCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SetOrderUpdated = `-- name: SetOrderUpdated :execresult
UPDATE orders
SET updated_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) SetOrderUpdated(ctx context.Context, id uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, SetOrderUpdated, id)
}

const SoftDeleteOrder = `-- name: SoftDeleteOrder :execresult
UPDATE orders
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteOrder(ctx context.Context, id uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, SoftDeleteOrder, id)
}

const SoftDeleteOrderItem = `-- name: SoftDeleteOrderItem :execresult
UPDATE order_items
SET deleted_at = NOW()
WHERE order_id = $1
  AND product_id = $2
  AND deleted_at IS NULL
`

type SoftDeleteOrderItemParams struct {
	OrderID   uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) SoftDeleteOrderItem(ctx context.Context, arg SoftDeleteOrderItemParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, SoftDeleteOrderItem, arg.OrderID, arg.ProductID)
}
