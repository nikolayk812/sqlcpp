// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/shopspring/decimal"
)

const deleteOrder = `-- name: DeleteOrder :execresult
DELETE
FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteOrder, id)
}

const deleteOrderItems = `-- name: DeleteOrderItems :execresult
DELETE FROM order_items
WHERE order_id = $1
`

func (q *Queries) DeleteOrderItems(ctx context.Context, orderID uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteOrderItems, orderID)
}

const getOrder = `-- name: GetOrder :one
SELECT id,
       owner_id,
       created_at,
       updated_at,
       url,
       status,
       tags,
       payload,
       payloadb
FROM orders
WHERE id = $1
`

type GetOrderRow struct {
	ID        uuid.UUID
	OwnerID   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Url       *string
	Status    string
	Tags      []string
	Payload   []byte
	Payloadb  []byte
}

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (GetOrderRow, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i GetOrderRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Status,
		&i.Tags,
		&i.Payload,
		&i.Payloadb,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT product_id, price_amount, price_currency, created_at
FROM order_items
WHERE order_id = $1
`

type GetOrderItemsRow struct {
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
	CreatedAt     time.Time
}

func (q *Queries) GetOrderItems(ctx context.Context, orderID uuid.UUID) ([]GetOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsRow
	for rows.Next() {
		var i GetOrderItemsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.PriceAmount,
			&i.PriceCurrency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderJoinItems = `-- name: GetOrderJoinItems :many
SELECT o.id,
       o.owner_id,
       o.created_at,
       o.updated_at,
       o.url,
       o.status,
       o.tags,
       o.payload,
       o.payloadb,
       oi.product_id,
       oi.price_amount,
       oi.price_currency
FROM orders o
         JOIN order_items oi ON o.id = oi.order_id
WHERE o.id = $1
`

type GetOrderJoinItemsRow struct {
	ID            uuid.UUID
	OwnerID       string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Url           *string
	Status        string
	Tags          []string
	Payload       []byte
	Payloadb      []byte
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
}

func (q *Queries) GetOrderJoinItems(ctx context.Context, id uuid.UUID) ([]GetOrderJoinItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderJoinItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderJoinItemsRow
	for rows.Next() {
		var i GetOrderJoinItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Status,
			&i.Tags,
			&i.Payload,
			&i.Payloadb,
			&i.ProductID,
			&i.PriceAmount,
			&i.PriceCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (owner_id, url, tags, payload, payloadb)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertOrderParams struct {
	OwnerID  string
	Url      *string
	Tags     []string
	Payload  []byte
	Payloadb []byte
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertOrder,
		arg.OwnerID,
		arg.Url,
		arg.Tags,
		arg.Payload,
		arg.Payloadb,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO order_items (order_id, product_id, price_amount, price_currency)
VALUES ($1, $2, $3, $4)
`

type InsertOrderItemParams struct {
	OrderID       uuid.UUID
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.PriceAmount,
		arg.PriceCurrency,
	)
	return err
}

const searchOrders = `-- name: SearchOrders :many
SELECT o.id,
       o.owner_id,
       o.created_at,
       o.updated_at,
       o.url,
       o.status,
       o.tags,
       o.payload,
       o.payloadb,
       oi.product_id,
       oi.price_amount,
       oi.price_currency
FROM orders o
         JOIN order_items oi ON o.id = oi.order_id
WHERE (
          ($1::UUID[] IS NULL OR o.id = ANY ($1))
              AND
          ($2::VARCHAR[] IS NULL OR o.owner_id = ANY ($2))
              AND
          ($3::TEXT[] IS NULL OR EXISTS (SELECT 1
                                                    FROM unnest($3) AS url_pattern
                                                    WHERE o.url ILIKE '%' || url_pattern || '%'))
              AND
          ($4::TEXT[] IS NULL OR o.status = ANY ($4))
              AND
          ($5::TEXT[] IS NULL OR EXISTS (SELECT 1
                                            FROM unnest($5) AS tag
                                            WHERE tag = ANY ($5)))
              AND
          (
              ($6::TIMESTAMP IS NULL OR o.created_at >= $6) AND
              ($7::TIMESTAMP IS NULL OR o.created_at < $7)
              )
              AND
          (
              ($8::TIMESTAMP IS NULL OR o.updated_at >= $8) AND
              ($9::TIMESTAMP IS NULL OR o.updated_at < $9)
              )
          )
`

type SearchOrdersParams struct {
	Ids           []uuid.UUID
	OwnerIds      []string
	UrlPatterns   []string
	Statuses      []string
	Tags          []string
	CreatedAfter  *time.Time
	CreatedBefore *time.Time
	UpdatedAfter  *time.Time
	UpdatedBefore *time.Time
}

type SearchOrdersRow struct {
	ID            uuid.UUID
	OwnerID       string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Url           *string
	Status        string
	Tags          []string
	Payload       []byte
	Payloadb      []byte
	ProductID     uuid.UUID
	PriceAmount   decimal.Decimal
	PriceCurrency string
}

func (q *Queries) SearchOrders(ctx context.Context, arg SearchOrdersParams) ([]SearchOrdersRow, error) {
	rows, err := q.db.Query(ctx, searchOrders,
		arg.Ids,
		arg.OwnerIds,
		arg.UrlPatterns,
		arg.Statuses,
		arg.Tags,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchOrdersRow
	for rows.Next() {
		var i SearchOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Status,
			&i.Tags,
			&i.Payload,
			&i.Payloadb,
			&i.ProductID,
			&i.PriceAmount,
			&i.PriceCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
